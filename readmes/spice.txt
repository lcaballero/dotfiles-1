===================================================================================================
TISPICE
===================================================================================================

* PULSE Waveform
* VPULSE NET 0 PULSE V1 V2 TD TR TF PW PER

* PBIT Waveform
* VPBIT NET 0 PBIT V0 V1 td01 t01 td10 t10 pbittime [tdinit] $0101



* To punch the current through a node/pin
* -----------------------------------------
* VDDS is the pin name in the definition of the TX sub-circuit and not the sub-circuit call
.MEA TR Ivdds_Tx AVG I(X0.XI0.XTX,VDDS)



Osc Startup sims:
Use ".OPTION METHOD=TRAP"
Default option, if not specified, is "METHOD=GEAR2"



* Regular Expressions
* ---------------------
* Wildcards (Shell-styel Glomming)
.PU TR ALL(V(WCRD('CLK[0-9]')))

* Simple Regexps
.PU TR ALL(V(REG('CLK[0-9]')))

* Extended Regexps (perl style except for \w\W\d\D\s\S support)
.PU TR ALL(V(XREG('CLK[0-9]')))





===================================================================================================
HSPICE
===================================================================================================

* OPTIONS
*----------
ALTCC      : One time reading of input netlist for multiple .ALTER commands
MEASFORM=2 : MEASURE file format similar to .prt
POSTLVL=n  : Probes all voltages and currents for 'n'th heirarchy level
POSTTOP=n  : Probes all voltages and currents for top 'n' heirarchy levels


* Derivative function
* ---------------------
.PROBE der=deriv('v(NodeX)')


* Integrate function
* --------------------
.PROBE int=integ('v(NodeX)')


* Continuos Measurement
* -----------------------
* Dumps continuosly all values of out for V(out)=0.5V starting from the first crossing point
.MEA TRAN_CONT out_cont WHEN V(out)=0.5 CROSS=1


* Glitch Detection
* ------------------
.PROBE dout=deriv("v(out)")
* Save the derivative of v(out) as waveform dout

.MEA TR tsiglow  WHEN V(out)='0.1*pvdd' RISE=1
.MEA TR tsighigh WHEN V(out)='0.9*pvdd' RISE=LAST
* Save the threshold values (optional)

.MEA TR tdout_1 WHEN par(dout)=0 FROM='tr_10' TO='tr_90' CROSS=1
.MEA TR tdout_2 WHEN par(dout)=0 FROM='tr_10' TO='tr_90' CROSS=2
.MEA TR tdout_3 WHEN par(dout)=0 FROM='tr_10' TO='tr_90' CROSS=3
* Measure zero-crossing points between threshhold values

.MEA TRAN_CONT tdout_cont WHEN par(dout)=0 CROSS=1
* Continuous Measurement: Use this in case all zero-crossing points are required


* Typical Measure and Probe statements
* -------------------------------------
.PROBE AC VR=PAR('VR(padxo)-VR(padxi)')
.PROBE AC VI=PAR('VI(padxo)-VI(padxi)')
.PROBE AC VM=PAR('VM(padxo)/VM(padxi)')
.PROBE AC VP=PAR('VP(padxo)-VP(padxi)')

.PROBE TR V(pad) V(padn) V(pad,padn)

.MEA TR Vpadpn0 FIND V(X0.pad,X0.padn) AT='tstop'
