#!/bin/bash -f
#===================================================================================================
# Helper                                                                                                            {{{1
#===================================================================================================
# Foreground/Background Color Codes
  # 30/40 : black
  # 31/41 : red
  # 32/42 : green
  # 33/43 : yellow
  # 34/44 : blue
  # 35/45 : magenta
  # 36/46 : cyan
  # 37/47 : white
#
# Attribute Codes
  #  0 : Normal
  #  1 : Bold
  #  2 : Normal
  #  3 : Italics*
  #  4 : Underline
  #  5 : Blink
  #  6 : Outline
  #  7 : Reverse FG and BG Colors
  #  8 : Invisible (FG color is made same as BG)
  #  9 : Strike-out*
  # 22 : Bold Off
  # 23 : Italics Off
  # 24 : Underline Off
  # 25 : Blink Off
  # 27 : Reverse Off
  # 29 : Strike-out Off
#
# Syntax
# zsh: %{\e[<attrib1>;<attrib2>...;<fg>;<bg>m%}
# bash: \[\033[<attrib1>;<fg>m\]


# Using colors based on the color command
# Color command generates the hashes 'fg', 'fg_bold', 'fg_no_bold', 'bg', 'bg_bold', 'bg_no_bold'
# The keys of the above hashes are 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'
#
# The following code is required to use hash based call
#  setopt PROMPT_SUBST
#  autoload colors zsh/terminfo
#  if [[ "$terminfo[colors]" -ge 8 ]]; then
#    colors
#  fi
#
# Syntax : %{$bg_bold[red]$fg[white]%}
# normal=$terminfo[sgr0]

# This should always point to whatever prompt is desired.
PROMPT_COMMAND=_preprompt_sjlmod_


#=======================================================================================================================
# Mod of Phil's ZSH Prompt                                                                                          {{{1
#=======================================================================================================================
precmd() {
  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  ###
  # Truncate the path if it's too long.
  PR_FILLBAR=""
  PR_PWDLEN=""
  modPWD="${PWD/#$HOME/~}"

  local promptsize=${#${(%):-()--(%h)-}}
  local pwdsize=${#${(%):-${modPWD} } }

  if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
  else
    PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
  fi
}

setprompt_philmod () {
  ###
  # Need this so the prompt will work.
  #setopt PROMPT_SUBST


  ###
  # See if we can use colors.
  autoload colors zsh/terminfo
  if [[ "$terminfo[colors]" -ge 8 ]]; then
      colors
  fi
  blink=$'\e[5m'
  blink_off=$'\e[25m'
    normal="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"      # Enter extended character input mode
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"     # Exit extended character input mode
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}


    ###
    # Decide if we need to set titlebar text.
    case $TERM in
  xterm*)
      PR_TITLEBAR=$'%{\e]0;%n@%m: %~\a%}'
      ;;
  *)
      PR_TITLEBAR=''
      ;;
    esac


    ###
    # Finally, the prompt.
    PROMPT='$PR_SET_CHARSET${(e)PR_TITLEBAR}\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_ULCORNER$PR_SHIFT_OUT\
%{$fg_bold[black]%}(%{$fg_no_bold[green]%}%h%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
%{$fg_bold[black]%}(%{%(?.$fg_bold[green].$fg_bold[red])%}%$PR_PWDLEN<...<${modPWD}%<<%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN${(e)PR_FILLBAR}$PR_URCORNER$PR_SHIFT_OUT\

$PR_SHIFT_IN$PR_LLCORNER$PR_HBAR$PR_SHIFT_OUT\
%(?.%{$fg_bold[green]%}(^_^%).%{$fg_bold[red]%}(@_@%)) \
%{%(!.$fg_bold[red].$fg_bold[white])%}%#$normal '

    RPROMPT=' %{$fg_bold[black]%}(%{$fg_no_bold[yellow]%}%D{%H:%M %b %d, %a}%{$fg_bold[black]%})\
%{$fg_no_bold[white]%}$PR_SHIFT_IN$PR_LRCORNER$PR_SHIFT_OUT$normal'

    PS2='%{$fg_no_bold[white]%}%_ >$normal '
}



#=======================================================================================================================
# Misc Prompts                                                                                                      {{{1
#=======================================================================================================================
setprompt_misc() {
  setopt PROMPT_SUBST
  autoload colors zsh/terminfo
  if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
  fi

  blink=$'\e[5m'
  blink_off=$'\e[25m'
  normal="%{$terminfo[sgr0]%}"

  #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  #PS1="\`if [ \$? = 0 ]; then echo \[\e[32m\]^_^\[\e[0m\]; else echo \[\e[31m\]@_@\[\e[0m\]; fi\`[!\!] \W/$ "
  #PS1="[\!] \W/$ "
  #PS1="\[\e[0;33m\][!\!]\`if [[ \$? = "0" ]]; then echo "\\[\\e[32m\\]"; else echo "\\[\\e[31m\\]"; fi\` \`if [[ `pwd|wc -c` -gt 18 ]]; then echo "\\W"; else echo "\\w"; fi\`/\$\[\e[0m\] "
  #PS1="\[\e[0;33m\][!\!]\[\e[0m\] \`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w \n^_^\[\e[0m\]'; else echo '\[\e[1;31m\]\w\n@_@\[\e[0m\]'; fi\` $ "
  #PS1="\[\e[1;30m\](\[\e[0;33m\]!\!\[\e[1;30m\])-(\`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w\[\e[1;30m\])\n\[\e[1;32m\]^_^'; else echo '\[\e[1;31m\]\w\[\e[1;30m\])\n\[\e[1;31m\]@_@'; fi\` \[\e[1;30m\]$ \[\e[0m\]"
  PS1="\n\[\e[0;37m\](\[\e[0;33m\]!\!\[\e[0;37m\])-(\`if [ \$? = 0 ]; then echo '\[\e[1;32m\]\w\[\e[0;37m\])\n(\[\e[1;32m\]^_^\[\e[0;37m\])'; else echo '\[\e[1;31m\]\w\[\e[0;37m\])\n(\[\e[1;31m\]@_@\[\e[0;37m\])'; fi\` \[\e[0;37m\]$ \[\e[0m\]"
  #PS1="${bg_red_fg_white_blink}%(t.DING!.)%(30t.DONG!.)${att_normal}${fg_dgray}[${fg_brown}%h${fg_dgray}]-(%(?.${fg_lgreen}.${fg_lred})%~${fg_dgray})${fg_lgray}%# ${att_normal}"
  #PS1="[%(t.${blink}%{${bg[red]}${fg_no_bold[white]}%}DING!${normal}.%(30t.${blink}%{${bg[red]}${fg_no_bold[white]}%}DONG!${normal}.%{$fg_bold[yellow]%}%D{%H:%M}))${normal}] "
  #PS1='[%h]-($modPWD)$ '
  RPS1=" [%h]"
}


#=======================================================================================================================
# Mod of SJL's prompt                                                                                               {{{1
#=======================================================================================================================
#
#  SJL's Prompt
#  Credit for ideas/info: Phil!'s ZSH Prompt, Bashish, TERMWIDE prompt
#                         Bash Prompt Howto
#                         http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
#
# Example:
# ┌ kshenoy @ svvgar-nx16 in ~/.vim ───────────────────── 03:57pm Aug 02, Fri
# └ (^_^) ➤
#
##### code ####
## Use bash builtin checkwinsize option for terminals which fail to properly
## set the $COLUMNS variable. (bug workaround)
shopt -s checkwinsize

## This function is run at every prompt update, keeping our variables updated.
## Bash's PROMPT_COMMAND option handles this (see end of this function).
_preprompt_sjlmod_() {

  # This has to be placed first
  local cmd_exit="$?"

  # We use this instead of $COLUMNS as when a shell is starting, the $COLUMNS variable is not set
  local columns=$(tput cols)

  # Colors
  local prc_norm='\[\e[0m\]'            # clear all colors
  local prc_bg='\[\e[38;5;250m\]'
  local prc_white=${prc_norm}
  local prc_red='\[\e[38;5;160m\]'
  local prc_lime='\[\e[38;5;154m\]'
  local prc_cherry='\[\e[38;5;161m\]'
  local prc_yellow='\[\e[38;5;221m\]'
  local prc_orange='\[\e[38;5;214m\]'
  local prc_rose='\[\e[38;5;211m\]'

  # Set line graphics
  local pr_dash="─"
  #local pr_dash="━"
  local pr_ulcorner="┌"
  local pr_llcorner="└"
  #local pr_urcorner="┐"
  #local pr_lrcorner="┘"

  #local pr_dash="-"
  #local pr_ulcorner=""
  #local pr_llcorner=""

  # If root user then colour the arrow red.
  if [ "${UID}" = 0 ]; then
    local prc_user_symbol=${prc_red}
    #local pr_user_symbol=" \$"
  else
    local prc_user_symbol=${prc_white}
    #local pr_user_symbol=" #"
  fi

  # The info variables
  local pr_pwd=$PWD
  #for k in "${!dir_alias[@]}"; do
    #echo "$k => ${dir_alias[$k]}"
    #echo ${pr_pwd/#$k/${dir_alias[$k]}}
  #done
  #for i in ${!dir_alias[@]}; do
  #  [ -n "$i" ] && pr_pwd=${pr_pwd/#$i/${dir_alias[$i]}}
  #done
  if   [[(-n "$HOME"    ) && ("$pr_pwd" =~ ^"$HOME"    )]]; then pr_pwd=${pr_pwd/#$HOME/\~};
  elif [[(-n "$as0ks/as") && ("$pr_pwd" =~ ^"$as0ks/as")]]; then pr_pwd=${pr_pwd/#"$as0ks/as"/\~AS0};
  elif [[(-n "$as0"     ) && ("$pr_pwd" =~ ^"$as0"     )]]; then pr_pwd=${pr_pwd/#$as0/\~AS0};
  elif [[(-n "$as1ks/as") && ("$pr_pwd" =~ ^"$as1ks/as")]]; then pr_pwd=${pr_pwd/#"$as1ks/as"/\~AS1};
  elif [[(-n "$as1"     ) && ("$pr_pwd" =~ ^"$as1"     )]]; then pr_pwd=${pr_pwd/#$as1/\~AS1};
  elif [[(-n "$ass0"    ) && ("$pr_pwd" =~ ^"$ass0"    )]]; then pr_pwd=${pr_pwd/#$ass0/\~ASS0};
  elif [[(-n "$ass1"    ) && ("$pr_pwd" =~ ^"$ass1"    )]]; then pr_pwd=${pr_pwd/#$ass1/\~ASS1};
  elif [[(-n "$ass2"    ) && ("$pr_pwd" =~ ^"$ass2"    )]]; then pr_pwd=${pr_pwd/#$ass2/\~ASS2};
  fi

  # Force time to US Mountain Time (we do this here as well as in .bashrc as sourcing some env files overwrites this)
  local pr_time="$(TZ=US/Mountain date +%I:%M%P\ %b\ %d,\ %a) "
  #local pr_time="$( date +%I:%M%P\ %b\ %d,\ %a) "
  local pr_user="$(whoami) "
  local pr_user_host_sep="@ "
  local pr_pwd_sep="in "
  local pr_host="$(hostname) "

  # VCS specific
  local pr_vcs=""
  _get_vcs_type_ pr_vcs_type
  local pr_vcs_branch=""
  _get_vcs_branch_ pr_vcs_branch
  local pr_vcs_sep=" on "
  local prc_vcs_branch=${prc_norm}

  if [[ $pr_vcs_type == "git" ]]; then
    local pr_user_symbol=" ±"

    if $(echo "$(git log origin/$pr_vcs_branch..HEAD 2> /dev/null)" | grep '^commit' &> /dev/null); then
      local prc_vcs_branch=${prc_orange}
    elif [[ -n $(git status -s --ignore-submodules=dirty  2> /dev/null) ]]; then
      local prc_vcs_branch=${prc_cherry}
    else
      local prc_vcs_branch=${prc_lime}
    fi

  elif [[ $pr_vcs_type == "hg" ]]; then
    local pr_user_symbol=" ☿"
  else
    #local pr_user_symbol=" ○"
    #local pr_user_symbol=" ➤"
    local pr_user_symbol=" $"
    local pr_vcs_sep=""
  fi

  # Set length of our important info
  local pr_info="${pr_ulcorner} ${pr_user}${pr_user_host_sep}${pr_host}${pr_pwd_sep}${pr_pwd}${pr_vcs_sep}${pr_vcs_branch} ${pr_time}"
  let pr_fillsize=${columns}-${#pr_info}

  # If info is wider than the screen, drop the time display
  if [ "$pr_fillsize" -lt "0" ]; then
    pr_time=""
    pr_info="${pr_ulcorner} ${pr_user}${pr_user_host_sep}${pr_host}${pr_pwd_sep}${pr_pwd}${pr_vcs_sep}${pr_vcs_branch} "
    let pr_fillsize=${columns}-${#pr_info}
  fi

  # If the info still can't fit, drop user and domain info
  if [ "$pr_fillsize" -lt "0" ]; then
    pr_user=""
    pr_user_host_sep=""
    pr_host=""
    pr_info="${pr_ulcorner} ${pr_pwd_sep}${pr_pwd}${pr_vcs_sep}${pr_vcs_branch} "
    let pr_fillsize=${columns}-${#pr_info}
  fi
  pr_pwd_sep="${prc_white}${pr_pwd_sep}"

  # If the info still can't fit, drop vcs branch
  if [ "$pr_fillsize" -lt "0" ]; then
    pr_vcs_sep=""
    pr_vcs_branch=""
    pr_info="${pr_ulcorner} ${pr_pwd_sep}${pr_pwd} "
    let pr_fillsize=${columns}-${#pr_info}
  fi
  pr_pwd_sep="${prc_white}${pr_pwd_sep}"

  # If the info still can't fit, truncate PWD
  if [ "$pr_fillsize" -lt "0" ]; then
    pr_pwd_sep="..."
    while [ "$pr_fillsize" -lt 0 ]; do
      pr_pwd=`echo $pr_pwd | sed 's|^/\?[^/]*/||'`
      pr_info="${pr_ulcorner} ${pr_pwd_sep}${pr_pwd} "
      let pr_fillsize=${columns}-${#pr_info}
    done
    pr_pwd_sep="${prc_lime}${pr_pwd_sep}"
  fi
  pr_pwd="${prc_lime}${pr_pwd}${pr_norm}"

  local pr_fill=""
  let pr_fillsize=$pr_fillsize-1
  while [ "$pr_fillsize" -gt "0" ]; do
    pr_fill="${pr_fill}${pr_dash}"
    let pr_fillsize=${pr_fillsize}-1
  done
  pr_fill="${pr_fill} "

  # Color pr_pwd based upon exit status of last command
  if [ "$cmd_exit" = "0" ]; then
    pr_cmd_exit="${prc_lime} (^_^)${prc_norm}"
  else
    pr_cmd_exit="${prc_red} (@_@)${prc_norm}"
  fi

  PS1="\n${prc_norm}${prc_bg}${pr_ulcorner} ${prc_cherry}${pr_user}${prc_white}${pr_user_host_sep}${prc_orange}${pr_host}"
  PS1+="${pr_pwd_sep}${pr_pwd}${prc_white}${pr_vcs_sep}${prc_vcs_branch}${pr_vcs_branch} "
  PS1+="${prc_bg}${pr_fill}${prc_orange}${pr_time}"
  PS1+="\n${prc_bg}${pr_llcorner}${pr_cmd_exit}${prc_user_symbol}${pr_user_symbol}${prc_norm} "

  PS2="${prc_user_symbol}${pr_user_symbol}${prc_norm} "

  # Evaluate dynamic variables only if dyn_vars is defined (Not required for prompt)
  declare -F dyn_vars &> /dev/null && dyn_vars

  # Write to the history file immediately instead of waiting till the end of the session
  history -a
}


_get_vcs_type_() {                                                                                                # {{{1
  # Description: Check if specified directory is under a Version-controlled system
  # Arguments: 1 - Variable to return VCS type
  #            2 - Directory to check. If skipped, defaults to PWD

  local cwd=$PWD
  if (( $#>1 )); then
    command cd $2
  fi

  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Check if PWD is under Git
    eval "$1='git'"

  elif hg status > /dev/null 2>&1; then
    # Check if PWD is under Mercurial
    eval "$1='hg'"

  else
    # No VCS. Return empty string
    eval "$1=''"
  fi

  command cd $cwd
}


_get_vcs_branch_() {                                                                                              # {{{1
  # Description: If PWD is under a VCS, return the branch. If not, return an empty string
  # Arguments: 1 - The variable into which the branch name must be written

  # Get VCS type
  vcs_type=""
  _get_vcs_type_ vcs_type

  if [[ $vcs_type == "git" ]]; then
    #echo "Detected git versioning scheme"
    local ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    eval "$1=${ref#refs/heads/}"

  elif [[ $vcs_type == "hg" ]]; then
    #echo "Detected mercurial versioning scheme"
    eval "$1=$(hg branch 2> /dev/null)"

  else
    eval "$1=''"
  fi
}
