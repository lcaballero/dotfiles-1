#!/usr/bin/perl

#=======================================================================================================================
# Documentation                                                                                                     {{{1
#=======================================================================================================================
=head1 NAME

 rerun

=head1 AUTHOR

 Kartik Shenoy

=head1 SYNOPSIS

 rerun [OPTIONS]

=head1 DESCRIPTION

 Reruns the previous simulation according to the run_job command present
 in sim.out or summary.rj file if no arguments are specified

=head1 OPTIONS

  -a, --add           Add any options to the CMD. Can be specified multiple times
                      Overrides --delete
  -b, --build         Build model before running
  -c, --clean         Clean model and rebuild before running
                      Implies --build unless --norun is specified
  -C, --clean_all     Clean all models and rebuild before running
                      Implies --build unless --norun is specified
      --cmd           Provide the cmd directly to clean up and run.
                      Overrides --file
  -d, --delete        Delete any options from the CMD. Can be specified multiple times
      --dsp           Enable displayer output (Enabled by default)
      --nodsp         Disable displayer output
  -f, --file          Name of file to pick up the run_job command from
                      Defaults to ./sim.out or ./summary.rj
                      When a jobspec file is specified, --noyaml is set by default
      --lsf           Use LSF. LSF is not used by default
      --nolsf         Do not use LSF
  -m, --model         Use the specified model instead of the one obtained from the run_job command
  -r, --run           Execute the run_job (Enabled by default)
      --norun         Do not execute the run_job
  -t, --test          Test run. Just print the command to execute but don't run it
  -v, --verbose       Verbose mode. Print values of all arguments
  -w, --wtf           Run WhyTheFail upon build failure (Enabled by default)
      --nowtf         Do not run WhyTheFail if build fails
  -y, --yaml          Enable logging via amdmsg_config.yaml (Enabled by default).
                      The yaml file to be used can be specified as an optional argument.
                      Defaults to /proj/aspen_func_dev0/ASPEN/kshenoy/amdmsg_config.yaml
      --noyaml        Disable logging (Delete amdmsg_config.yaml file)

=cut
# }}}1

use strict;
#use diagnostics;
use Getopt::Long;
use Pod::Usage;

Getopt::Long::Configure("bundling");
#Getopt::Long::Configure("pass_through");

# Default values for options ===========================================================================================
my %opts = (
  'add'         => "",
  'build'       => 0,
  'clean'       => 0,
  'clean_all'   => 0,
  'cmd'         => "",
  'delete'      => "",
  'dsp'         => 1,
  'file'        => "sim.out",
  'lsf'         => 0,
  'model'       => "",
  'run'         => 1,
  'test'        => 0,
  'verbose'     => 0,
  'wtf'         => 1,
  'yaml'        => "/proj/aspen_func_dev0/ASPEN/kshenoy/amdmsg_config.yaml",
  'yaml_f'      => 0, # We use this option to identify when the --yaml option was specified
);
$opts{'file'} = "summary.rj" unless ( -e $opts{'file'} );

GetOptions(
  \%opts,
  'add|a=s',
  'build|b',
  'clean|c',
  'clean_all|C'   => sub { $opts{'clean_all'} = 1; $opts{'clean'} = 0; },
  'cmd=s',
  'delete|d=s',
  'dsp!',
  'file|f=s',
  'help|h|?'      => sub { pod2usage( -verbose => 1, -exitval => 0 ); },
  'lsf!',
  'model|m=s',
  'noyaml'        => sub { $opts{'yaml'} = "" },
  'run|r!',
  'test|t',
  'verbose|v!',
  'wtf|w!',
  'y|yaml:s'      => sub { $opts{'yaml_f'} = 1; $opts{'yaml'} = $_[1]; }
) or pod2usage( -verbose => 1 ) && exit;

# Force options
# |-------+--------+--------------------------------------------------|
# | yaml  | yaml_f | Description                                      |
# |-------+--------+--------------------------------------------------|
# | !  "" |      X | The user forced the --noyaml option              |
# | != "" |      0 | The user used neither option -> use all defaults |
# | != "" |      1 | The user forced the --yaml option                |
# |-------+--------+--------------------------------------------------|
$opts{'build'} ||= ( $opts{'clean'} || $opts{'clean_all'} ) && $opts{'run'};
if ( $opts{'file'} =~ /.xml$/ ) {
  $opts{'ljd'} = 1;
  $opts{'dsp'} = 0;
  # Delete any amdmsg_config.yaml files when running a jobspec unless 'yaml' is explicitly specified
  unless ( $opts{'yaml_f'} ) {
    $opts{'yaml'} = "";
  }
}

print "INFO: Ignoring extra arguments '@ARGV'\n" if ( $#ARGV >= 0 );

# Dump the input arguments
if ( $opts{'verbose'} ){
  print "add        : '$opts{'add'}'\n";
  print "build      : $opts{'build'}\n";
  print "clean      : $opts{'clean'}\n";
  print "clean_all  : $opts{'clean_all'}\n";
  print "cmd        : $opts{'cmd'}\n"   unless ( $opts{'cmd'}   eq "" );
  print "delete     : '$opts{'delete'}'\n";
  print "dsp        : $opts{'dsp'}\n";
  print "file       : $opts{'file'}\n"  if     ( $opts{'cmd'}   eq "" );
  print "lsf        : $opts{'lsf'}\n";
  print "model      : $opts{'model'}\n" if     ( $opts{'model'} ne "" );
  print "run        : $opts{'run'}\n";
  print "test       : $opts{'test'}\n";
  print "yaml       : $opts{'yaml'}\n";
  print "\n";
}

# Get the run_job command from the file ================================================================================
if (  (  (  $opts{'build'}
         || $opts{'clean'}
         )
      && ( $opts{'model'} eq "" )
      && ( $opts{'cmd'}   eq "" )
      )
   || (  $opts{'run'}
      && ( $opts{'cmd'} eq "" )
      )
   ) {
  if ( $opts{'ljd'} ) {
    print "Provided file: $opts{'file'} is a jobspec file...\n" if $opts{'verbose'};
    $opts{'cmd'} = "ljd -nomail -l $opts{'file'}";
  } else {
    print "Command not specified. Obtaining it from $opts{'file'}...\n" if $opts{'verbose'};
    ( -e $opts{'file'} ) or pod2usage({ -verbose => 1, -message => "ERROR: File not found: $opts{'file'}\n"});
    # Stop searching after 1st match
    $opts{'cmd'} = `\\grep -s -m 1 run_job $opts{'file'}`;
    ( $opts{'cmd'} eq "" ) and pod2usage({ -verbose => 1, -message => "ERROR: Unable to locate the run_job command in $opts{'file'}\n" });
  }
}
chomp( $opts{'cmd'} );

# Get the model from the run_job command ===============================================================================
if ( $opts{'model'} eq "" ) {
  if ( $opts{'ljd'} ) {
    print "Model not specified. Obtaining it from the jobspec file...\n" if $opts{'verbose'};
    ( $opts{'model'} ) = `\\grep -s -m 1 model $opts{'file'}` =~ /<model>([^<]+)<\/model>/;
  } else {
    print "Model not specified. Obtaining it from the run_job command...\n" if $opts{'verbose'};
    ( $opts{'model'} ) = $opts{'cmd'} =~ /-model\s*(\w+)/;
  }
}
print "Model: '$opts{'model'}'\n\n" if $opts{'verbose'};
$opts{'cmd'} =~ s/(-model)\s*\w+/$1 $opts{'model'}/;

if ( $opts{'test'} ) {
  print  "[ TEST RUN ]\n\n";
}

# Include/Exclude the amdmsg_config.yaml file
if ( $opts{'yaml'} ne "" ){
  # Copy only if the yaml does not exist and --yaml is not forced. Do not overwrite any existing yaml file
  if (  $opts{'yaml_f'}
     || !( -f "amdmsg_config.yaml" )
     ) {
    print  "[ Copying amdmsg_config.yaml ]\n\n";
    system '\cp ' . $opts{'yaml'} . ' amdmsg_config.yaml' unless $opts{'test'};
  }
} else {
  print  "[ Deleting amdmsg_config.yaml ]\n\n";
  system '\rm amdmsg_config.yaml 2> /dev/null' unless $opts{'test'};
}

# Build/Clean ==========================================================================================================
my $cmd_build;
   $cmd_build  = "build -clean -model $opts{'model'}" if $opts{'clean'};
   $cmd_build  = "build -clean_all" if $opts{'clean_all'};
   $cmd_build .= " && " if (( $opts{'clean'} || $opts{'clean_all'} ) && $opts{'build'} );
   $cmd_build .= "build -model $opts{'model'}" if $opts{'build'};

# Beautify :P
$cmd_build =~ s/^\s*|\s*$//g;
$cmd_build =~ s/\s+/ /g;
if ( $opts{'clean'} || $opts{'clean_all'} || $opts{'build'} ) {
  print "[ BUILD CMD ]\n";
  print "    $cmd_build\n\n";
}

# Run Job ==============================================================================================================
if ( $opts{'run'} ) {
  print "[ RUN_JOB CMD ]\n";
  # Remove junk arguments
  $opts{'cmd'} =~ s/-batch_name\s*\S+\s*//;
  $opts{'cmd'} =~ s/-rtp_datafile\s*\S+\s*//;
  $opts{'cmd'} =~ s/-p\s+crdb\s*//g;
  $opts{'cmd'} =~ s/-(?:no)?crdb\s*//g;
  $opts{'cmd'} =~ s/-o ""\s*//;
  $opts{'cmd'} =~ s/-(?:no)?delete//;
  $opts{'cmd'} =~ s/-gzip\s*//;
  $opts{'cmd'} =~ s/-test_id\s*\S+\s*//;
  $opts{'cmd'} =~ s/-p\s+rg_dsp_ch\s*//;

  # Add/Delete options to/from the CMD
  $opts{'cmd'} .= " -lsf" if $opts{'lsf'};
  if ( $opts{'delete'} ne "" ){
    print "    Removing option: '$opts{'delete'}'\n";
    # We use \Q and \E to escape any special characters such as in '+DUMP'
    $opts{'cmd'} =~ s/\Q$opts{'delete'}\E//;
  }
  if ( $opts{'add'} ne "" ){
    print "    Adding option: '$opts{'add'}'\n";
    $opts{'cmd'} .= " " . $opts{'add'};
  }

  # Include/Exclude displayer log
  if ( $opts{'dsp'} ) {
    $opts{'cmd'} .= " -p dsp_ch" unless ( $opts{'cmd'} =~ /\bdsp_ch\b/ );
  } else {
    $opts{'cmd'} =~ s/\s*-p\s+dsp_ch\b//;
  }

  # Beautify :P
  $opts{'cmd'} =~ s/^\s*|\s*$//g;
  $opts{'cmd'} =~ s/\s+/ /g;
  print "    $opts{'cmd'}\n";
}

# Execute ==============================================================================================================
unless ( $opts{'test'} ) {
  print "\n";
  if (  $opts{'build'}
     && system qq($cmd_build)
     ) {
    system "WhyTheFail" if $opts{'wtf'};
    exit 1;
  }
  exec qq($opts{'cmd'}) if $opts{'run'};
}
