#!/tools/local/perl -l

## Pragmas
use strict;
use diagnostics;
use Getopt::Long;

use constant DEBUG => 0;


## Variable Declaration
my $refdeck;
my $currdeck;
my $cfg;
my $verbose;


## Command-line parameter handling
GetOptions(
	"ifile|i:s" => \$refdeck,
	"configfile|c:s" => \$cfg,
	"verbose|v" => \$verbose,
);


## Variable Initialisation
my $spicesim="/apps/ame/bin/hspice -mp"
#my $spicesim="/apps/synopsys/hspice/2010.03/hspice/bin/hspice";
#my $spicesim="/apps/ame/bin/spice3";

defined($refdeck) || warn("WARNING: Input file not specified. Using sample.deck by default\n");
$refdeck=$refdeck||"sample.deck";
die("ERROR : \'$refdeck\' not found. Terminating...\n") unless(-e $refdeck);

$verbose|=DEBUG;

if(-e "command"){
	warn("WARNING: Command file already exists. Appending to it...\n");
	open(COM,">>command");
	chomp($_=`date`);
	print COM "\n####################################################################################################\n# Added on ".$_;
}else{
	open(COM,">command");
}


## Config file to be specified must be a cut-config file
if(defined($cfg)&&($cfg ne "")){
	open CFG, "<$cfg" or die "ERROR: Specified config file \'$cfg\' doesn't exist\n";

	my @arr_tags;
	my @arr_val;
	my $flag;

	while(<CFG>){
		chomp;
		if(/^#/){
			# Extracts tags from cut-config file
			print "Identified config file as a cut-config file" if($verbose);
			$flag=s/^#//;
			@arr_tags=split(/,/);
			print "  Reference Deck : $refdeck\n  Config file : $cfg" if($verbose);

		}elsif($flag){
            s/,$//;
			@arr_val=split(/,/);
			s/,/_/g;
			$_="startup_54M_".$_;
			$currdeck=$_.".deck";
			system("/bin/cp -f $refdeck $currdeck");
			print "Creating $currdeck" if($verbose); 

			foreach my $i (0..$#arr_tags){
				print "  Replacing $arr_tags[$i] with $arr_val[$i]" if($verbose);
				system("/bin/sed -i 's/<$arr_tags[$i]>/$arr_val[$i]/' $currdeck");
			}

			print COM "/usr/local/lsf/bin/bsub -P P0:IO_10015123 -q regress -R \"select[ws40 && mem > 4000]\" -sp 100 -J $_ -o ${currdeck}.lsf.out $spicesim $currdeck";
			
		}
	}
	$flag || die "ERROR: Specified config file not recognizable as a cut-config file. To specify normal config file format, use arrays explicitly\n";
	close(CFG);

}else{
	print "Config file not specified, generating files for all combinations";
	print "  Reference Deck : $refdeck" if($verbose);

	my @process_list = qw(nnsp nnwp nom snnp snwp strong weak weak_nbti wnnp wnsp);
	my @vdds_list = qw(1.62 1.8 1.98);
	my @vdd_list = qw(0.9 1.0 1.1 1.21);
	my @temp_list = qw(-40 25 125);

    #my @process_list = qw(TT);
	#my @vdds_list = qw(1.8);
    #my @vdd_list = qw(1.1);
	#my @temp_list = qw(25);

	foreach my $process(@process_list) {
		foreach my $vdds (@vdds_list) {
			foreach my $vdd (@vdd_list) {
				foreach my $temp (@temp_list) {
					$currdeck="startup_54M_${process}_${vdds}_${vdd}_${temp}";
					print "Creating $currdeck.deck" if($verbose); 
					system("/bin/cp -f $refdeck $currdeck.deck ; /bin/sed -i -e 's/<process>/$process/' -e 's/<vdds>/$vdds/' -e 's/<vdd>/$vdd/' -e 's/<temp>/$temp/' $currdeck.deck");			
					print COM "/usr/local/lsf/bin/bsub -P P0:IO_10015123 -q regress -R \"select[ws40 && mem > 4000]\" -sp 100 -J $currdeck -o ${currdeck}.deck.lsf.out $spicesim $currdeck.deck";
				}
			}
		}
	}
}

close COM;
