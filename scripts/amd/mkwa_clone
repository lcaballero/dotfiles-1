#!/bin/bash -e
#
# SYNTAX: mkwa_clone
#   P4 Work area - The work area to run the sim in
#   Changelist - The changelist to update to before running

function print_help() {
  echo "Usage:"
  echo "  `basename $0` [OPTIONS]"
  echo
  echo "Options:"
  echo "  -h    Print this help"
  echo "  -c    Update both Source and Target work-areas to the specified changelist before running"
  echo "  -s    Use the specified dir as the Source work-area"
  echo "  -t    Use the specified dir as the Target work-area instead of using \$REPO_PATH"
  echo "  -n    Do not make any changes. Simply list the commands that will be run"
}

# Defaults
src=""
src_upd=0
src_cl=0
if [[ -z ${REPO_PATH} ]]; then targ=${PWD}; else targ=${REPO_PATH}; fi
targ_create=0
targ_upd=0
targ_cl=0
upd_cl=0
summary=0
verbose=1
noexec=0

# Colors for echo!
fg_green=$(tput bold; tput setaf 2)
reset=$(tput sgr0)

echo
while getopts ":c:s:t:nhv" opt; do
  case $opt in
    c)
      upd_cl=${OPTARG}
      ;;

    s)
      src=$(cd ${OPTARG}; pwd)
      if [ ! -f ${src}/configuration_id ]; then
        echo "ERROR: Source ($src) work-area is not a valid Perforce repository";
        exit 1;
      fi
      ;;

    t)
      targ=$(cd ${OPTARG}; pwd)
      ;;

    n)
      noexec=1
      ;;

    v)
      verbose=1
      ;;

    h)
      print_help
      exit 0
      ;;

    :)
      echo "ERROR: Option -${OPTARG} requires an argument" >&2; echo
      print_help
      exit 1
      ;;

    \?)
      echo "ERROR: Invalid option: -${OPTARG}" >&2; echo
      print_help
      exit 1
      ;;
  esac
  shift $((OPTIND-1))
done

# Determine which CL to update to ______________________________________________________________________________________
src_cl=$(grep -Po "(?<=aspen_trunk@)\d+" ${src}/configuration_id)
if [ -f ${targ}/configuration_id ]; then
  targ_cl=$(grep -Po "(?<=aspen_trunk@)\d+" ${targ}/configuration_id)
else
  targ_create=1;
fi

if (( ${upd_cl} < ${src_cl}  )); then upd_cl=${src_cl};  fi
if (( ${upd_cl} < ${targ_cl} )); then upd_cl=${targ_cl}; fi

if (( ${upd_cl} > ${src_cl}  )); then
  src_upd=1
fi
if (( ${upd_cl} > ${targ_cl} )); then
  targ_upd=1
fi

# Print the input options ______________________________________________________________________________________________
echo "Source        :  $src"
echo "Update Source :  $src_upd"
echo "Target        :  $targ"
echo "Create Target :  $targ_create"
echo "Update Target :  $targ_upd"
echo "Update CL ID  :  $upd_cl"

# Source ===============================================================================================================
echo -e "\n${fg_green}[Bootenv into Source work-area...]${reset}"
if (( $noexec == 0 )); then
  cd $src
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv
fi

if (( $src_upd > 0 )); then
  echo "\n${fg_green}[Updating Source work-area to CL=${upd_cl}...]${reset}"
  if (( $noexec == 0 )); then
    p4w update_env @$upd_cl
  fi
fi

# Copy files opened in Source
echo -e "\n${fg_green}[Create list of files opened/edited in Source work-area...]${reset}"
if (( $noexec == 0 )); then
  p4w opened | perl -pe 's/^.*?\/trunk\/|#.*$//g' >| /tmp/mkwa_clone_$$
fi

# Target ===============================================================================================================

# Create/Update Target
if (( $targ_create > 0 )); then
  echo -e "\n${fg_green}[Target work-area is not a valid Perforce repository. Creating it...]${reset}"
  if (( $noexec == 0 )); then
    command mkdir -p $targ && command cd $targ
    . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash
    p4_mkwa -configuration_id aspen/aspen_trunk@$upd_cl
  fi
elif (( $targ_upd > 0 )); then
  echo "\n${fg_green}[Updating Target work-area to CL=${upd_cl}]${reset}"
  if (( $noexec == 0 )); then
    cd $targ
    . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv
    p4w update_env @$upd_cl
  fi
else
  echo -e "\n${fg_green}[Bootenv into Target work-area...]${reset}"
  if (( $noexec == 0 )); then
    cd $targ
    . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv
  fi
fi

echo -e "\n${fg_green}[Copying all modified files from Source...]${reset}"
if (( $noexec == 0 )); then
  while read; do
    p4w edit $REPLY
    command cp ${src}/$REPLY ${targ}/$REPLY
  done < /tmp/mkwa_clone_$$
fi

# Clean-up =============================================================================================================
echo -e "\n${fg_green}[Cleaning up...]${reset}"
if (( $noexec == 0 )); then
  command rm /tmp/mkwa_clone_$$ &> /dev/null
fi
