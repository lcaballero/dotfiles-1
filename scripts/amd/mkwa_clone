#!/bin/bash -e
#
# SYNTAX: mkwa_clone
#   P4 Work area - The work area to run the sim in
#   Changelist - The changelist to update to before running

function print_help() {
  echo "Usage:"
  echo "  `basename $0` [OPTIONS]"
  echo
  echo "Options:"
  echo "  -h    Print this help"
  echo "  -c    Update both Source and Target work-areas to the specified changelist before running"
  echo "  -s    Use the specified dir as the Source work-area"
  echo "  -t    Use the specified dir as the Target work-area instead of using \$REPO_PATH"
}

# Defaults
src=""
src_upd=0
src_cl=0
targ=${REPO_PATH:-$PWD}
targ_create=0
targ_upd=0
targ_cl=0
upd_cl=0
summary=0
verbose=1

pipe="${TMPDIR:-/tmp}/mkwa_clone_$$"
if [[ -p ${pipe} ]]; then
  # Flush pipe if it exists
  dd if=${pipe} of=/dev/null iflag=nonblock
else
  mkfifo ${pipe}
fi

# Colors for echo!
fg_green=$(tput bold; tput setaf 2)
reset=$(tput sgr0)

echo
while getopts ":c:s:t:hv" opt; do
  case $opt in
    c)
      upd_cl=${OPTARG}
      ;;

    s)
      src=$(readlink -f ${OPTARG})
      if [ ! -f ${src}/configuration_id ]; then
        echo "ERROR: Source ($src) work-area is not a valid Perforce repository";
        exit 1;
      fi
      ;;

    t)
      targ=$(readlink -f ${OPTARG})
      ;;

    v)
      verbose=1
      ;;

    h)
      print_help
      exit 0
      ;;

    :)
      echo -e "ERROR: Option -${OPTARG} requires an argument\n" >&2
      print_help
      exit 1
      ;;

    \?)
      echo -e "ERROR: Invalid option: -${OPTARG}\n" >&2
      print_help
      exit 1
      ;;
  esac
done

# Remove all option arguments and leave "$@" with just the non-option arguments
shift $((OPTIND-1))

# Determine which CL to update to ______________________________________________________________________________________
src_cl=$(grep -Po "(?<=aspen_trunk@)\d+" ${src}/configuration_id)
if [[ -f ${targ}/configuration_id ]]; then
  targ_cl=$(grep -Po "(?<=aspen_trunk@)\d+" ${targ}/configuration_id)
else
  targ_create=1;
fi

if (( ${upd_cl} < ${src_cl}  )); then upd_cl=${src_cl};  fi
if (( ${upd_cl} < ${targ_cl} )); then upd_cl=${targ_cl}; fi
if (( ${upd_cl} > ${src_cl}  )); then src_upd=1;         fi
if (( ${upd_cl} > ${targ_cl} )); then targ_upd=1;        fi

# Print the input options ______________________________________________________________________________________________
echo "Common CL : $upd_cl"
echo "Source    : $src"
echo "  Update  : $src_upd"
echo "Target    : $targ"
echo "  Create  : $targ_create"
echo "  Update  : $targ_upd"


# Source ===============================================================================================================
(
cd $src
echo -e "\n${fg_green}[Bootenv into Source work-area: $PWD]${reset}"
. /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv

if (( $src_upd > 0 )); then
  echo -e "\n${fg_green}[Updating Source work-area to CL=${upd_cl}...]${reset}"
  p4w update_env @$upd_cl
fi

## Copy files opened in Source
echo -e "\n${fg_green}[Create list of files opened/edited in Source work-area...]${reset}"
p4w opened > ${pipe}
) &


# Target ===============================================================================================================

# Create/Update Target
if (( $targ_create > 0 )); then
  echo -e "\n${fg_green}[Target work-area is not a valid Perforce repository. Creating it...]${reset}"
  if [[ ! -d $targ ]]; then
    command mkdir -p $targ
  fi
  command cd $targ
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash
  p4_mkwa -configuration_id aspen/aspen_trunk@$upd_cl
else
  command cd $targ
  echo -e "\n${fg_green}[Bootenv into Target work-area: $PWD]${reset}"
  . /proj/verif_release_ro/cbwa_initscript/nodisk_current/cbwa_init.bash && bootenv

  if (( $targ_upd > 0 )); then
    echo -e "\n${fg_green}[Updating Target work-area to CL=${upd_cl}]${reset}"
    p4w update_env @$upd_cl
  fi
fi

echo -e "\n${fg_green}[Copying all modified files from Source...]${reset}"
while read; do
  echo $REPLY
  file=$(echo $REPLY | perl -pe 's,^.*?/trunk/|#.*$,,g')
  if [[ "$REPLY" =~ "edit default change" ]]; then
    p4w edit $file
  fi
  command cp ${src}/$file ${targ}/$file
  if [[ "$REPLY" =~ "add default change" ]]; then
    p4w add ${targ}/$file
  fi
done < ${pipe}

# Clean-up =============================================================================================================
echo -e "\n${fg_green}[Cleaning up...]${reset}"
command rm ${pipe} &> /dev/null
exit 0
