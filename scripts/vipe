#!/bin/bash -e
#
# Credits: reddit.com/u/Neitanod
#          (https://www.reddit.com/r/vim/comments/3oo156/whats_your_best_vim_related_shell_script)
#
# Provides a way to put the editor in the middle of a pipe chain
#   eg. firstcommand | vipe | othercommand
# Thus, the output from firstcommand serves as input for othercommand, but also allows edits in the middle

vimtmp="${TMPDIR:-/tmp}/vipe_$$"

## Dump the stdin to file
cat > ${vimtmp}

## Edit the file
## Since this script is used in the middle of a pipe, its input and output channels do not come from the terminal.
## This can be checked by uncommenting the following lines:
#if [[ ! -t 0 ]]; then echo "stdin is not from terminal"; fi
#if [[ ! -t 1 ]]; then echo "stdout is not to terminal"; fi
#if [[ ! -t 2 ]]; then echo "stderr is not to terminal"; fi

## http://superuser.com/a/336020/99982
## Vim expects its stdin to be the same as its controlling terminal, and performs various terminal-related ioctl's on
## stdin directly. When done on any non-tty file descriptor, those ioctls are meaningless and return ENOTTY, which gets
## silently ignored. On startup Vim reads and remembers the old terminal settings, and restores them back when exiting.
## Thus, when the "old settings" are requested for a non-tty fd (file descriptor), Vim receives all values empty and all
## options disabled, and carelessly sets the same to your terminal.
## This can be seen by running vim < /dev/null, exiting it, then running stty, which will output a whole lot of <undef>s.
##
## This could be considered as a bug in vim, since it can open /dev/tty for terminal control, but doesn't.

## Thus, to make vim interactive again, we need to explicitly connect its input and output to the terminal
vim ${vimtmp} < /dev/tty > /dev/tty

## Dump the modified file to stdout
command cat ${vimtmp}

## Clean-up
command rm ${vimtmp}
